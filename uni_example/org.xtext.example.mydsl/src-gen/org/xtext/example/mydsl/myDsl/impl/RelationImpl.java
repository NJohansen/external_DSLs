/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Relation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#getFromType <em>From Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#getFromName <em>From Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#isFromMultiple <em>From Multiple</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#getToName <em>To Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#isToMultiple <em>To Multiple</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RelationImpl#getToType <em>To Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationImpl extends DeclarationImpl implements Relation
{
  /**
   * The cached value of the '{@link #getFromType() <em>From Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromType()
   * @generated
   * @ordered
   */
  protected Entity fromType;

  /**
   * The default value of the '{@link #getFromName() <em>From Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromName()
   * @generated
   * @ordered
   */
  protected static final String FROM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFromName() <em>From Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromName()
   * @generated
   * @ordered
   */
  protected String fromName = FROM_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isFromMultiple() <em>From Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFromMultiple()
   * @generated
   * @ordered
   */
  protected static final boolean FROM_MULTIPLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFromMultiple() <em>From Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFromMultiple()
   * @generated
   * @ordered
   */
  protected boolean fromMultiple = FROM_MULTIPLE_EDEFAULT;

  /**
   * The default value of the '{@link #getToName() <em>To Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToName()
   * @generated
   * @ordered
   */
  protected static final String TO_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getToName() <em>To Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToName()
   * @generated
   * @ordered
   */
  protected String toName = TO_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isToMultiple() <em>To Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToMultiple()
   * @generated
   * @ordered
   */
  protected static final boolean TO_MULTIPLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isToMultiple() <em>To Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isToMultiple()
   * @generated
   * @ordered
   */
  protected boolean toMultiple = TO_MULTIPLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getToType() <em>To Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToType()
   * @generated
   * @ordered
   */
  protected Entity toType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getFromType()
  {
    if (fromType != null && fromType.eIsProxy())
    {
      InternalEObject oldFromType = (InternalEObject)fromType;
      fromType = (Entity)eResolveProxy(oldFromType);
      if (fromType != oldFromType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.RELATION__FROM_TYPE, oldFromType, fromType));
      }
    }
    return fromType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetFromType()
  {
    return fromType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFromType(Entity newFromType)
  {
    Entity oldFromType = fromType;
    fromType = newFromType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__FROM_TYPE, oldFromType, fromType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFromName()
  {
    return fromName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFromName(String newFromName)
  {
    String oldFromName = fromName;
    fromName = newFromName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__FROM_NAME, oldFromName, fromName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFromMultiple()
  {
    return fromMultiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFromMultiple(boolean newFromMultiple)
  {
    boolean oldFromMultiple = fromMultiple;
    fromMultiple = newFromMultiple;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__FROM_MULTIPLE, oldFromMultiple, fromMultiple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getToName()
  {
    return toName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setToName(String newToName)
  {
    String oldToName = toName;
    toName = newToName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__TO_NAME, oldToName, toName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isToMultiple()
  {
    return toMultiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setToMultiple(boolean newToMultiple)
  {
    boolean oldToMultiple = toMultiple;
    toMultiple = newToMultiple;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__TO_MULTIPLE, oldToMultiple, toMultiple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getToType()
  {
    if (toType != null && toType.eIsProxy())
    {
      InternalEObject oldToType = (InternalEObject)toType;
      toType = (Entity)eResolveProxy(oldToType);
      if (toType != oldToType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.RELATION__TO_TYPE, oldToType, toType));
      }
    }
    return toType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetToType()
  {
    return toType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setToType(Entity newToType)
  {
    Entity oldToType = toType;
    toType = newToType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RELATION__TO_TYPE, oldToType, toType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.RELATION__FROM_TYPE:
        if (resolve) return getFromType();
        return basicGetFromType();
      case MyDslPackage.RELATION__FROM_NAME:
        return getFromName();
      case MyDslPackage.RELATION__FROM_MULTIPLE:
        return isFromMultiple();
      case MyDslPackage.RELATION__TO_NAME:
        return getToName();
      case MyDslPackage.RELATION__TO_MULTIPLE:
        return isToMultiple();
      case MyDslPackage.RELATION__TO_TYPE:
        if (resolve) return getToType();
        return basicGetToType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.RELATION__FROM_TYPE:
        setFromType((Entity)newValue);
        return;
      case MyDslPackage.RELATION__FROM_NAME:
        setFromName((String)newValue);
        return;
      case MyDslPackage.RELATION__FROM_MULTIPLE:
        setFromMultiple((Boolean)newValue);
        return;
      case MyDslPackage.RELATION__TO_NAME:
        setToName((String)newValue);
        return;
      case MyDslPackage.RELATION__TO_MULTIPLE:
        setToMultiple((Boolean)newValue);
        return;
      case MyDslPackage.RELATION__TO_TYPE:
        setToType((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.RELATION__FROM_TYPE:
        setFromType((Entity)null);
        return;
      case MyDslPackage.RELATION__FROM_NAME:
        setFromName(FROM_NAME_EDEFAULT);
        return;
      case MyDslPackage.RELATION__FROM_MULTIPLE:
        setFromMultiple(FROM_MULTIPLE_EDEFAULT);
        return;
      case MyDslPackage.RELATION__TO_NAME:
        setToName(TO_NAME_EDEFAULT);
        return;
      case MyDslPackage.RELATION__TO_MULTIPLE:
        setToMultiple(TO_MULTIPLE_EDEFAULT);
        return;
      case MyDslPackage.RELATION__TO_TYPE:
        setToType((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.RELATION__FROM_TYPE:
        return fromType != null;
      case MyDslPackage.RELATION__FROM_NAME:
        return FROM_NAME_EDEFAULT == null ? fromName != null : !FROM_NAME_EDEFAULT.equals(fromName);
      case MyDslPackage.RELATION__FROM_MULTIPLE:
        return fromMultiple != FROM_MULTIPLE_EDEFAULT;
      case MyDslPackage.RELATION__TO_NAME:
        return TO_NAME_EDEFAULT == null ? toName != null : !TO_NAME_EDEFAULT.equals(toName);
      case MyDslPackage.RELATION__TO_MULTIPLE:
        return toMultiple != TO_MULTIPLE_EDEFAULT;
      case MyDslPackage.RELATION__TO_TYPE:
        return toType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (fromName: ");
    result.append(fromName);
    result.append(", fromMultiple: ");
    result.append(fromMultiple);
    result.append(", toName: ");
    result.append(toName);
    result.append(", toMultiple: ");
    result.append(toMultiple);
    result.append(')');
    return result.toString();
  }

} //RelationImpl
