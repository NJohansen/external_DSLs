/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntitySystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EntitySystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		
		////ParserRule - An EntitySystem has a name which is an ID
		//// and then many declarations which is why declaration+=Declaration*
		//EntitySystem: // system University
		//    'system' name=ID declaration+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// system University
		//   'system' name=ID declaration+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//// system University
		//   'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declaration+=Declaration*
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_2_0() { return cDeclarationDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Above is equal to
		//// EntitySystem ::= ‘system’ name=ID Declaration*
		//Declaration:
		//    Entity | Relation
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Relation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBaseEntityCrossReference_2_1_0 = (CrossReference)cBaseAssignment_2_1.eContents().get(0);
		private final RuleCall cBaseEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBaseEntityCrossReference_2_1_0.eContents().get(1);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		
		////Above is equal to
		//// Declaration ::= Entity | Relation
		////Entity starts with keyword entity. There might be a ':' which is why
		//// (':' base=ID)?
		//// += means that there is a list of attributes
		//// = means there there is only one attribute
		//// ()? Means that the thing in the () is optional
		//// Attribute* means that there can be 0 to many attributes
		//Entity: // entity Person
		//    'entity' name=ID (':' base=[Entity])? attributes+=Attribute*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// entity Person
		//   'entity' name=ID (':' base=[Entity])? attributes+=Attribute*
		public Group getGroup() { return cGroup; }
		
		//// entity Person
		//   'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' base=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//base=[Entity]
		public Assignment getBaseAssignment_2_1() { return cBaseAssignment_2_1; }
		
		//[Entity]
		public CrossReference getBaseEntityCrossReference_2_1_0() { return cBaseEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBaseEntityIDTerminalRuleCall_2_1_0_1() { return cBaseEntityIDTerminalRuleCall_2_1_0_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		////Above is equal to
		////Entity ::= ‘entity’ name=ID (‘:’ super=ID:Entity)? Attribute*
		//Attribute: // attribute name: String
		//    'attribute' name=ID ':' type=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// attribute name: String
		//   'attribute' name=ID ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//// attribute name: String
		//   'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFromTypeEntityCrossReference_2_0 = (CrossReference)cFromTypeAssignment_2.eContents().get(0);
		private final RuleCall cFromTypeEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cFromTypeEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cFromNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromNameIDTerminalRuleCall_3_0 = (RuleCall)cFromNameAssignment_3.eContents().get(0);
		private final Assignment cFromMultipleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cFromMultipleAsteriskKeyword_4_0 = (Keyword)cFromMultipleAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToNameIDTerminalRuleCall_6_0 = (RuleCall)cToNameAssignment_6.eContents().get(0);
		private final Assignment cToMultipleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cToMultipleAsteriskKeyword_7_0 = (Keyword)cToMultipleAssignment_7.eContents().get(0);
		private final Assignment cToTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cToTypeEntityCrossReference_8_0 = (CrossReference)cToTypeAssignment_8.eContents().get(0);
		private final RuleCall cToTypeEntityIDTerminalRuleCall_8_0_1 = (RuleCall)cToTypeEntityCrossReference_8_0.eContents().get(1);
		
		////Above is equals to:
		//// Attribute ::= ‘attribute’ name=ID ‘:’ type=ID
		////Relation starts with keyword relation
		//Relation:
		//    'relation' 'from' fromType=[Entity] fromName=ID (fromMultiple?='*')?
		//    'to' toName=ID (toMultiple?='*')? toType=[Entity]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' 'from' fromType=[Entity] fromName=ID (fromMultiple?='*')?
		//'to' toName=ID (toMultiple?='*')? toType=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//fromType=[Entity]
		public Assignment getFromTypeAssignment_2() { return cFromTypeAssignment_2; }
		
		//[Entity]
		public CrossReference getFromTypeEntityCrossReference_2_0() { return cFromTypeEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getFromTypeEntityIDTerminalRuleCall_2_0_1() { return cFromTypeEntityIDTerminalRuleCall_2_0_1; }
		
		//fromName=ID
		public Assignment getFromNameAssignment_3() { return cFromNameAssignment_3; }
		
		//ID
		public RuleCall getFromNameIDTerminalRuleCall_3_0() { return cFromNameIDTerminalRuleCall_3_0; }
		
		//(fromMultiple?='*')?
		public Assignment getFromMultipleAssignment_4() { return cFromMultipleAssignment_4; }
		
		//'*'
		public Keyword getFromMultipleAsteriskKeyword_4_0() { return cFromMultipleAsteriskKeyword_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//toName=ID
		public Assignment getToNameAssignment_6() { return cToNameAssignment_6; }
		
		//ID
		public RuleCall getToNameIDTerminalRuleCall_6_0() { return cToNameIDTerminalRuleCall_6_0; }
		
		//(toMultiple?='*')?
		public Assignment getToMultipleAssignment_7() { return cToMultipleAssignment_7; }
		
		//'*'
		public Keyword getToMultipleAsteriskKeyword_7_0() { return cToMultipleAsteriskKeyword_7_0; }
		
		//toType=[Entity]
		public Assignment getToTypeAssignment_8() { return cToTypeAssignment_8; }
		
		//[Entity]
		public CrossReference getToTypeEntityCrossReference_8_0() { return cToTypeEntityCrossReference_8_0; }
		
		//ID
		public RuleCall getToTypeEntityIDTerminalRuleCall_8_0_1() { return cToTypeEntityIDTerminalRuleCall_8_0_1; }
	}
	
	
	private final EntitySystemElements pEntitySystem;
	private final DeclarationElements pDeclaration;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final RelationElements pRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntitySystem = new EntitySystemElements();
		this.pDeclaration = new DeclarationElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pRelation = new RelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////ParserRule - An EntitySystem has a name which is an ID
	//// and then many declarations which is why declaration+=Declaration*
	//EntitySystem: // system University
	//    'system' name=ID declaration+=Declaration*
	//;
	public EntitySystemElements getEntitySystemAccess() {
		return pEntitySystem;
	}
	
	public ParserRule getEntitySystemRule() {
		return getEntitySystemAccess().getRule();
	}
	
	////Above is equal to
	//// EntitySystem ::= ‘system’ name=ID Declaration*
	//Declaration:
	//    Entity | Relation
	//    ;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	////Above is equal to
	//// Declaration ::= Entity | Relation
	////Entity starts with keyword entity. There might be a ':' which is why
	//// (':' base=ID)?
	//// += means that there is a list of attributes
	//// = means there there is only one attribute
	//// ()? Means that the thing in the () is optional
	//// Attribute* means that there can be 0 to many attributes
	//Entity: // entity Person
	//    'entity' name=ID (':' base=[Entity])? attributes+=Attribute*
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	////Above is equal to
	////Entity ::= ‘entity’ name=ID (‘:’ super=ID:Entity)? Attribute*
	//Attribute: // attribute name: String
	//    'attribute' name=ID ':' type=ID
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	////Above is equals to:
	//// Attribute ::= ‘attribute’ name=ID ‘:’ type=ID
	////Relation starts with keyword relation
	//Relation:
	//    'relation' 'from' fromType=[Entity] fromName=ID (fromMultiple?='*')?
	//    'to' toName=ID (toMultiple?='*')? toType=[Entity]
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
