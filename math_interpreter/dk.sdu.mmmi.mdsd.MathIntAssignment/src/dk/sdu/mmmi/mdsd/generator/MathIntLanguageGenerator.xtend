/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.swing.JOptionPane
import dk.sdu.mmmi.mdsd.mathIntLanguage.MathExp
import dk.sdu.mmmi.mdsd.mathIntLanguage.Plus
import dk.sdu.mmmi.mdsd.mathIntLanguage.Minus
import dk.sdu.mmmi.mdsd.mathIntLanguage.Multiply
import dk.sdu.mmmi.mdsd.mathIntLanguage.Division
import dk.sdu.mmmi.mdsd.mathIntLanguage.Expression
import dk.sdu.mmmi.mdsd.mathIntLanguage.Number


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathIntLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+ math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+ result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	//Compute the overall expression
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	//Static helper function for showing the result while hovering 
	def static int staticCompute(MathExp exp) {
		(new MathIntLanguageGenerator).compute(exp)
	}
	
	
	//Static helper function for showing each value while hovering
	def static int staticComputeExp(Expression exp) {
		(new MathIntLanguageGenerator).computeExp(exp)
	}
	
	//Recursive function that computes the expressions
	def int computeExp(Expression exp) {
		switch exp {
			Plus: exp.left.computeExp + exp.right.computeExp
			Minus: exp.left.computeExp - exp.right.computeExp
			Multiply: exp.left.computeExp * exp.right.computeExp
			Division: exp.left.computeExp / exp.right.computeExp
			Number: exp.value
			default: throw new Error(exp.toString)
		}
	}

	//
	// Display function: show complete syntax tree
	//

	def CharSequence display(MathExp math) '''
		Math[«math.exp.displayExp»]
	'''
	
	def CharSequence displayExp(Expression exp) {
	'Exp[' + switch exp {
			Plus: exp.left.displayExp + "+" + exp.right.displayExp
			Minus: exp.left.displayExp + "-" + exp.right.displayExp
			Multiply: exp.left.displayExp + "*" + exp.right.displayExp
			Division: exp.left.displayExp + "/" + exp.right.displayExp
			Number: exp.value.toString
			default: throw new Error("Error somewhere!!")
		} + ']'
	}
	
	
	
	

		
}