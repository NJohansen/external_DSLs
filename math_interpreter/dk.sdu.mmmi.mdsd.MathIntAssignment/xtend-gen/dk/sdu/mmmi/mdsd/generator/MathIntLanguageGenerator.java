/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.mathIntLanguage.Division;
import dk.sdu.mmmi.mdsd.mathIntLanguage.Expression;
import dk.sdu.mmmi.mdsd.mathIntLanguage.MathExp;
import dk.sdu.mmmi.mdsd.mathIntLanguage.Minus;
import dk.sdu.mmmi.mdsd.mathIntLanguage.Multiply;
import dk.sdu.mmmi.mdsd.mathIntLanguage.Plus;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathIntLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public static int staticCompute(final MathExp exp) {
    return new MathIntLanguageGenerator().compute(exp);
  }
  
  public static int staticComputeExp(final Expression exp) {
    return new MathIntLanguageGenerator().computeExp(exp);
  }
  
  public int computeExp(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = this.computeExp(((Plus)exp).getLeft());
      int _computeExp_1 = this.computeExp(((Plus)exp).getRight());
      _switchResult = (_computeExp + _computeExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Minus)exp).getRight());
        _switchResult = (_computeExp - _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Multiply) {
        _matched=true;
        int _computeExp = this.computeExp(((Multiply)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Multiply)exp).getRight());
        _switchResult = (_computeExp * _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Division) {
        _matched=true;
        int _computeExp = this.computeExp(((Division)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Division)exp).getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof dk.sdu.mmmi.mdsd.mathIntLanguage.Number) {
        _matched=true;
        _switchResult = ((dk.sdu.mmmi.mdsd.mathIntLanguage.Number)exp).getValue();
      }
    }
    if (!_matched) {
      String _string = exp.toString();
      throw new Error(_string);
    }
    return _switchResult;
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence displayExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      CharSequence _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      CharSequence _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        CharSequence _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Multiply) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Multiply)exp).getLeft());
        String _plus = (_displayExp + "*");
        CharSequence _displayExp_1 = this.displayExp(((Multiply)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Division) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Division)exp).getLeft());
        String _plus = (_displayExp + "/");
        CharSequence _displayExp_1 = this.displayExp(((Division)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof dk.sdu.mmmi.mdsd.mathIntLanguage.Number) {
        _matched=true;
        _switchResult = Integer.valueOf(((dk.sdu.mmmi.mdsd.mathIntLanguage.Number)exp).getValue()).toString();
      }
    }
    if (!_matched) {
      throw new Error("Error somewhere!!");
    }
    String _plus = ("Exp[" + _switchResult);
    return (_plus + "]");
  }
}
