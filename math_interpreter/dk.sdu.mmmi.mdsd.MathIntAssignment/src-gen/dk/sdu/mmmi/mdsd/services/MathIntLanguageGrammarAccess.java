/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathIntLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.MathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//MathExp:
		//    'result' 'is' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'result' 'is' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'result'
		public Keyword getResultKeyword_0() { return cResultKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.Exp");
		private final RuleCall cPlusOrMinusParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// So it takes a Factor, and if there is a '+' then it creates a Plus object. Both Minus and Plus object has a left and right.
		//// 5 + 1 + 1
		//Exp returns Expression:
		//    PlusOrMinus
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall() { return cPlusOrMinusParserRuleCall; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyOrDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyOrDivisionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression: // 5 = MultiplyOrDivsion
		//    MultiplyOrDivision (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MultiplyOrDivision)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// 5 = MultiplyOrDivsion
		//   MultiplyOrDivision (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MultiplyOrDivision)*
		public Group getGroup() { return cGroup; }
		
		//// 5 = MultiplyOrDivsion
		//   MultiplyOrDivision
		public RuleCall getMultiplyOrDivisionParserRuleCall_0() { return cMultiplyOrDivisionParserRuleCall_0; }
		
		//(('+' {Plus.left=current} | '-' {Minus.left=current}) right=MultiplyOrDivision)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current} | '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right=MultiplyOrDivision
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplyOrDivision
		public RuleCall getRightMultiplyOrDivisionParserRuleCall_1_1_0() { return cRightMultiplyOrDivisionParserRuleCall_1_1_0; }
	}
	public class MultiplyOrDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.MultiplyOrDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivisionLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplyOrDivision returns Expression:
		//    Primary (('*' {Multiply.left=current} | '/' {Division.left=current}) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('*' {Multiply.left=current} | '/' {Division.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('*' {Multiply.left=current} | '/' {Division.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Multiply.left=current} | '/' {Division.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Multiply.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_1() { return cMultiplyLeftAction_1_0_0_1; }
		
		//'/' {Division.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_1() { return cDivisionLeftAction_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary returns Expression:
		//    Number | Parenthesis
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis returns Expression:
		//    '(' Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.MathIntLanguage.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number:
		//    {Number} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final MathExpElements pMathExp;
	private final ExpElements pExp;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MultiplyOrDivisionElements pMultiplyOrDivision;
	private final PrimaryElements pPrimary;
	private final ParenthesisElements pParenthesis;
	private final NumberElements pNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathIntLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMathExp = new MathExpElements();
		this.pExp = new ExpElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMultiplyOrDivision = new MultiplyOrDivisionElements();
		this.pPrimary = new PrimaryElements();
		this.pParenthesis = new ParenthesisElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.MathIntLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MathExp:
	//    'result' 'is' exp=Exp
	//;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//// So it takes a Factor, and if there is a '+' then it creates a Plus object. Both Minus and Plus object has a left and right.
	//// 5 + 1 + 1
	//Exp returns Expression:
	//    PlusOrMinus
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//PlusOrMinus returns Expression: // 5 = MultiplyOrDivsion
	//    MultiplyOrDivision (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MultiplyOrDivision)*
	//;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MultiplyOrDivision returns Expression:
	//    Primary (('*' {Multiply.left=current} | '/' {Division.left=current}) right=Primary)*
	//;
	public MultiplyOrDivisionElements getMultiplyOrDivisionAccess() {
		return pMultiplyOrDivision;
	}
	
	public ParserRule getMultiplyOrDivisionRule() {
		return getMultiplyOrDivisionAccess().getRule();
	}
	
	//Primary returns Expression:
	//    Number | Parenthesis
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Parenthesis returns Expression:
	//    '(' Exp ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Number:
	//    {Number} value=INT
	//;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
